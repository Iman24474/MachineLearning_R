read.csv("wdbc.data")
setwd("C:/Users/nofer/OneDrive/Documents/GitHub/MachineLearning_R/Lazy Learning - Classification Using Nearest Neighbors")
read.csv("wdbc.data")
test <- read.csv("wdbc.data")
View(test)
test <- read.csv("wdbc.names")
wbcd <- read.csv("wdbc.data")
library(dplyr)
glimpse(wbcd)
wbcd <- read.csv("wisc_bc_data.csv")
View(wbcd)
glimpse(wbcd)
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
glimpse(wbcd)
# Preparing data
wbcd <- wbcd[,-1]
summary(wbcd$diagnosis)
glimpse(wbcd$diagnosis)
table(wbcd$diagnosis)
table(wbcd$radius_mean)
# Factoring target feature
wbcd$diagnosis <- factor(wbcd$diagnosis,
levels = c("B", "M"),
labels = c("Benign", "Malignant"))
glimpse(wbcd)
prop.table(wbcd$diagnosis)
prop.table(table(wbcd$diagnosis))
# Proportions
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
# Transformation - Normalizing numeric data
normalize <- function(x)
{
return((x - min(x)) / (max(x) - min(x)))
}
normalize(c(1,2,3,4,5))
# Applying the normalize() function to the numeric features in our dataframe.
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
View(wbcd_n)
glimpse(wbcd)
wbcd_test <- wbcd_n[470:569,]
# Creating training and test datasets
wbcd_train <- wbcd_n[1:469,]
wbcd_train_labels <- wbcd[1:469, 1]
View(wbcd_train)
wbcd_test_labels <- wbcd[470:569, 1]
install.packages("class")
# Training a model on the data
library(class)
p <- knn(train = wbcd_train,
test = wbcd_test,
cl = wbcd_train_labels,
k = 3)
p <- knn(train = wbcd_train,
test = wbcd_test,
cl = wbcd_train_labels,
k = 21)
rm(p)
wbcd_test_pred <- knn(train = wbcd_train,
test = wbcd_test,
cl = wbcd_train_labels,
k = 21)
install.packages("gmodels")
CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE)
# Evaluating model performance
library(gmodels)
CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE)
